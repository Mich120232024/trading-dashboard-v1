{\n  \"name\": \"trading-dashboard-v1\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"react-scripts test\",\n    \"build\": \"react-scripts build\",\n    \"eject\": \"react-scripts eject\",\n    \"start\": \"react-scripts start\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"recharts\": \"^2.9.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"web-vitals\": \"^2.1.4\",\n    \"tailwindcss\": \"^3.3.5\",\n    \"react-scripts\": \"5.0.1\",\n    \"@heroicons/react\": \"^2.0.18\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/jest-dom\": \"^5.17.0\",\n    \"@testing-library/user-event\": \"^13.5.0\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\"react-app\", \"react-app/jest\"]\n  },\n  \"browserslist\": {\n    \"production\": [\">0.2%\", \"not dead\", \"not op mini all\"],\n    \"development\": [\"last 1 chrome version\", \"last 1 firefox version\", \"last 1 safari version\"]\n  }\n}